{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACrB,uBACIC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,MCLLI,G,MAAO,SAAAC,GAAK,OACrB,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCFbC,G,MAAW,SAAAP,GAAK,OACzB,qBAAKJ,UAAU,YAAf,SACKI,EAAMQ,SAASC,KAAK,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCqChBM,G,wDAvCb,aAAc,IAAD,8BACX,gBAeFf,aAAe,SAAAgB,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAY,IALH,E,gEAUO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEJ,SAAUa,S,+BAOlC,IAAD,EAC6BC,KAAKN,MAAhCR,EADF,EACEA,SAAWK,EADb,EACaA,YACbU,EAAmBf,EAASgB,QAAQ,SAAArB,GAAO,OAC/CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEF,YAAY,iBACZC,aAAe2B,KAAK3B,eAEtB,cAAC,EAAD,CAAUa,SAAUe,W,GAjCVI,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.71b1890f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder , handleChange}) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n);","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>   \r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props =>( \r\n    <div className='card-list'>\r\n        {props.monsters.map( monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField:''\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({searchField: e.target.value});\r\n  };\r\n\r\n  render(){\r\n    const { monsters , searchField } = this.state;\r\n    const filteredMonsters = monsters.filter( monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n      );\r\n    return(\r\n      <div className='App'>\r\n        <h1> Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder='search monster'\r\n          handleChange= {this.handleChange}\r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}